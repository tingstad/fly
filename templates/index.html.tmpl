<!DOCTYPE html>
<html lang="en">
<head>
<title>Space invaders</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/5.5.0/xterm.js" integrity="sha512-Gujw5GajF5is3nMoGv9X+tCMqePLL/60qvAv1LofUZTV9jK8ENbM9L+maGmOsNzuZaiuyc/fpph1KT9uR5w3CQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/5.5.0/xterm.min.css" integrity="sha512-XpXUuzg5afNt1bsgnrOesXP70TLH8tXYYK5sK+Y0UV+YBvJn9EfRFYWy4HT3TVDfH0nl1CO0lwOxIrt2gk9qjg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
html, body {
    margin: 0;
    padding: 0;
    background-color: black;
    color: #D3D3D3;
    font-family: 'Inconsolata',monospace;
}
.xterm-screen {
    margin: 0 auto; /* center horizontally */
}
#buttons {
    display: none;
    margin: 0 auto;
}
button#space {
    flex-grow: 2;
}
button {
    height: 40px;
}
@media all and (min-width: 70em) {
    .text {
        width: 70em;
        margin: 0 auto;
    }
}
</style>
</head>
<body>
<div id="terminal"></div>
<div id="buttons">
    <button id="left">&lt;= LEFT</button> <button id="space">SPACE</button> <button id="right">RIGHT =&gt;</button>
</div>
<div class="text">
<p>
<a href="https://manpages.debian.org/jessie/ninvaders/ninvaders.6">MANUAL</a>: In short, this is a space invaders game written for the ncurses terminal control library. It uses ASCII art to draw everything, and you can play it just about anywhere. Space Invaders over dialup!
</p><p>
The object of the game is to shoot all the aliens (the multi-coloured moving things) before they reach the ground. Since these aliens aren't friendly (which is why you're trying to stop them) they will shoot back. Dodge the descending bullets or hang about under the large stationary blocks for cover.
</p><p>
<a href="https://github.com/tingstad/fly">SOURCE</a>
</p>
</div>
<script>
    const params = new URLSearchParams(window.location.search);
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints;
    const showButtons = isTouchDevice || params.get("k");
    let maxHeight = 0;
    const calculateSize = () => {
        const viewport = window.visualViewport;
        const maxWidth = Math.min(window.innerWidth, document.documentElement.clientWidth,
            ...(viewport ? [viewport.width] : []) );
        maxHeight = Math.min(window.innerHeight, document.documentElement.clientHeight,
            ...(viewport ? [viewport.height] : []) )
            - (showButtons ? 40 : 0);
        const max = Math.min(maxWidth, maxHeight * 1.85);
        const fontSize = parseInt(max / 48);
        return fontSize;
    };
    (window.visualViewport || window).addEventListener('resize', () => {
        term.options.fontSize = calculateSize();
    });
    var term = new Terminal({ fontSize: calculateSize() });
    term.open(document.getElementById('terminal'));
    term.focus();
    term.write('Hello, \x1B[1;3;31World\x1B[0m! $ ')
    term.write('\x1B[?25l');
    let prot = location.protocol == "http:" ? "ws" : "wss";
    let ws = new WebSocket(prot + "://" + location.host + "/ws");
    ws.onopen = function(evt) {
        console.log("OPEN");
    };
    ws.onclose = function(evt) {
        console.log("CLOSE");
        term.write('\x1B[?25h');
    };
    ws.onmessage = function(evt) {
        term.write(evt.data);
    };
    ws.onerror = function(evt) {
        console.log("ERROR: " + evt.data);
    };
    term.onData(e => {
        ws.send(e);
    });
    let screen;
    term.onRender(e => {
        if (!screen)
            screen = document.querySelector('.xterm-screen');
        if (screen && screen.clientHeight > maxHeight)
            term.options.fontSize = term.options.fontSize - 2;
    });
    const left  = () => ws.send({{ if .IsLinux }} "\x1b[D" {{else}} "\u001bOD" {{end}});
    const right = () => ws.send({{ if .IsLinux }} "\x1b[C" {{else}} "\u001bOC" {{end}});
    const space = () => ws.send(" ");
    if (showButtons)
        document.getElementById('buttons').style.display = "flex";
    let interval;
    const repeat = (fn) => (event) => {
        event.preventDefault();
        fn();
        interval = setInterval(fn, 100);
    };
    if (isTouchDevice) {
        document.getElementById('left').addEventListener('touchstart', repeat(left));
        document.getElementById('right').addEventListener('touchstart', repeat(right));
        document.getElementById('space').addEventListener('touchstart', repeat(space));
        for (let btn of [ "left", "right", "space" ])
            document.getElementById(btn).addEventListener('touchend', (e) => e.preventDefault());
    } else {
        document.getElementById('left').addEventListener('mousedown', repeat(left));
        document.getElementById('right').addEventListener('mousedown', repeat(right));
        document.getElementById('space').addEventListener('mousedown', repeat(space));
    }
    document.addEventListener('touchend', () => clearInterval(interval));
    document.addEventListener('mouseup',  () => clearInterval(interval));
    document.addEventListener('mouseleave', () => clearInterval(interval));
    document.addEventListener('keydown', function (event) {
        if (event.key === "ArrowLeft" || event.keyCode === 37) {
            event.preventDefault();
            left();
        } else if (event.key === "ArrowRight" || event.keyCode === 39) {
            event.preventDefault();
            right();
        } else if (event.key === " " || event.keyCode === 32) {
            event.preventDefault();
            space();
        } else {
            return;
        }
        term.focus();
    });
</script>
</body>
</html>
