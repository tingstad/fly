<!DOCTYPE html>
<html lang="en">
<head>
<title>Space invaders</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/xterm/5.5.0/xterm.js" integrity="sha512-Gujw5GajF5is3nMoGv9X+tCMqePLL/60qvAv1LofUZTV9jK8ENbM9L+maGmOsNzuZaiuyc/fpph1KT9uR5w3CQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/xterm/5.5.0/xterm.min.css" integrity="sha512-XpXUuzg5afNt1bsgnrOesXP70TLH8tXYYK5sK+Y0UV+YBvJn9EfRFYWy4HT3TVDfH0nl1CO0lwOxIrt2gk9qjg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
html, body {
    margin: 0;
    padding: 0;
    background-color: black;
}
.xterm-screen {
    margin: 0 auto; /* center horizontally */
}
#buttons {
    display: none;
    margin: 0 auto;
}
button#space {
    flex-grow: 2;
}
button {
    height: 40px;
}
</style>
</head>
<body>
<div id="terminal"></div>
<div id="buttons">
<button id="left">&lt;= LEFT</button> <button id="space">SPACE</button> <button id="right">RIGHT =&gt;</button>
</div>
<script>
    const params = new URLSearchParams(window.location.search);
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints;
    const showButtons = isTouchDevice || params.get("k");
    {{/*
        12: width: 576px; height: 312px;
        14: width: 672px; height: 360px;
        16: width: 768px; height: 408px;
        18: width: 864px; height: 456px;
        24: width: 1152px; height: 600px;
        36: width: 1728px; height: 888px;
        72: width: 3456px; height: 1752px;
    */}}
    const calculateSize = () => {
        const viewport = window.visualViewport;
        const maxWidth = Math.min(window.innerWidth, document.documentElement.clientWidth,
            ...(viewport ? [viewport.width] : []) );
        const maxHeight = Math.min(window.innerHeight, document.documentElement.clientHeight,
            ...(viewport ? [viewport.height] : []) )
            - (showButtons ? 40 : 0);
        const max = Math.min(maxWidth, maxHeight * 1.80);
        const fontSize = parseInt(max / 48);
        console.log("fontSize", fontSize);
        return fontSize;
    };
    window.addEventListener('resize', () => {
        term.options.fontSize = calculateSize();
    });
    var term = new Terminal({ fontSize: calculateSize() });
    term.open(document.getElementById('terminal'));
    term.focus();
    term.write('Hello, \x1B[1;3;31World\x1B[0m! $ ')
    term.write('\x1B[?25l');
    let prot = location.protocol == "http:" ? "ws" : "wss";
    let ws = new WebSocket(prot + "://" + location.host + "/ws");
    ws.onopen = function(evt) {
        console.log("OPEN");
    };
    ws.onclose = function(evt) {
        console.log("CLOSE");
        term.write('\x1B[?25h');
    };
    ws.onmessage = function(evt) {
        term.write(evt.data);
    };
    ws.onerror = function(evt) {
        console.log("ERROR: " + evt.data);
    };
    term.onData(e => {
        ws.send(e);
    });
    const left  = () => ws.send({{ if .IsLinux }} "\x1b[D" {{else}} "\u001bOD" {{end}});
    const right = () => ws.send({{ if .IsLinux }} "\x1b[C" {{else}} "\u001bOC" {{end}});
    const space = () => ws.send(" ");
    if (showButtons)
        document.getElementById('buttons').style.display = "flex";
    let interval;
    const repeat = (fn) => () => { fn(); interval = setInterval(fn, 100); };
    if (isTouchDevice) {
        document.getElementById('left').addEventListener('touchstart', repeat(left));
        document.getElementById('right').addEventListener('touchstart', repeat(right));
        document.getElementById('space').addEventListener('touchstart', repeat(space));
    } else {
        document.getElementById('left').addEventListener('mousedown', repeat(left));
        document.getElementById('right').addEventListener('mousedown', repeat(right));
        document.getElementById('space').addEventListener('mousedown', repeat(space));
    }
    document.addEventListener('touchend', () => clearInterval(interval));
    document.addEventListener('mouseup',  () => clearInterval(interval));
    document.addEventListener('mouseleave', () => clearInterval(interval));
    document.addEventListener('keydown', function (event) {
        if (event.key === "ArrowLeft" || event.keyCode === 37) {
            event.preventDefault();
            left();
        } else if (event.key === "ArrowRight" || event.keyCode === 39) {
            event.preventDefault();
            right();
        } else if (event.key === " " || event.keyCode === 32) {
            event.preventDefault();
            space();
        } else {
            return;
        }
        term.focus();
    });
</script>
</body>
</html>
